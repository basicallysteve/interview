{"version":3,"sources":["questions/index.js","questions/InterviewQuestion1.js","questions/InterviewQuestion2.js","questions/InterviewQuestion3.js","App.js","reportWebVitals.js","index.js"],"names":["useState","users","setUsers","name","setName","useEffect","length","axios","get","then","response","data","filteredUsers","_","memoize","filter","user","split","toLowerCase","startsWith","Container","size","Row","Col","className","Form","Control","placeholder","plaintext","value","onChange","$event","target","Table","striped","bordered","hover","map","username","website","id","title","body","post","setPost","status","setStatus","isValid","updatePost","field","prevPost","Alert","show","variant","onClose","dismissible","href","rel","style","margin","Label","type","as","Button","onClick","preventDefault","userId","finally","setTimeout","App","Navbar","expand","bg","Nav","Link","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e8e3fd9.chunk.js","sourcesContent":["import Question1 from \"./InterviewQuestion1\";\nimport Question2 from \"./InterviewQuestion2\";\nimport Question3 from \"./InterviewQuestion3\";\n\nexport default {\n    Q1: Question1,\n    Q2: Question2,\n    Q3: Question3\n}","import axios from \"axios\"\nimport _ from \"lodash\";\nimport {useEffect, useState} from \"react\"\nimport {Container,Row, Col, Table, Form} from \"react-bootstrap\"\nexport default function Question1(){\n    let [users, setUsers] = useState([]);\n    let [name, setName] = useState(\"\")\n    useEffect(()=>{\n        if(users.length === 0){\n            axios.get('https://jsonplaceholder.typicode.com/users').then(response => {\n                let users = response.data;\n                setUsers(users);\n            \n            })\n        }\n    }, [users])\n\n    \n    function updateName($event){\n        setName($event.target.value);\n    }\n    /**\n     * @function filter\n     * @param name\n     * @param users\n     * \n     * @returns {Array<Object>}\n     * \n     * @description Should return a list of users\n     */\n    function filter(name, users){\n        return name !== \"\" ? users.filter(user => user.name.split(\" \")[0].toLowerCase().startsWith(name.toLowerCase()) || user.name.split(\" \")[1].toLowerCase().startsWith(name.toLowerCase())) : users;\n    }\n    /**\n     * @function filteredUsers\n     * @param name\n     * @param users\n     * \n     * @returns {Array<Object>}\n     * \n     * @description Memoized(high performance) version of filter function\n     */\n    let filteredUsers = _.memoize(filter)\n    return (\n        <>\n        <Container size=\"sm\">\n            <Row>\n                <Col><h1>Question 1</h1></Col>\n            </Row>\n            <Row>\n                <Col>\n                    <p>We've received a list of users from our fictionary endpoint. We need to be able to view this information in a table with the first name, last name, username and then a link to their website. </p>\n                    <p><i>It's not required, but if you can filter the list of users by their first or last name, that is preferred</i></p>\n                </Col>\n            </Row>\n            <Row className=\"mb-1\">\n                {\n                    /**\n                     * Hint. If you want to do the bonus part, use Form.Control. It's a version of the HTML Input\n                     *  \n                     */\n                     <Form.Control placeholder=\"Search by Name\" plaintext value={name} onChange={updateName} />\n                }\n            </Row>\n            <Row>\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                    <th>First Name</th>\n                    <th>Last Name</th>\n                    <th>Username</th>\n                    <th>Website</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                       //Display users in table rows here\n                       filteredUsers(name, users).map(user => {\n                        return (\n                            <tr key={user.id}>\n                                <td>{user.name.split(\" \")[0]}</td>\n                                <td>{user.name.split(\" \")[1]}</td>\n                                <td>{user.username}</td>\n                                <td>{user.website}</td>\n                            </tr>\n                        )\n                    })\n                    }\n                </tbody>\n            </Table>\n            </Row>\n        </Container>\n        </>\n    );\n};","import axios from \"axios\"\nimport _ from \"lodash\";\nimport {useState} from \"react\"\nimport {Container,Row, Col, Form, Button, Alert} from \"react-bootstrap\"\n\nexport default function Question2(){\n    let [post, setPost] = useState({\n        title: \"\",\n        body: \"\"\n    })\n\n    let [status, setStatus] = useState(null)\n    /**\n     * @function validate\n     * @param {string} title\n     * @param {string} body\n     * @returns {boolean}\n     * \n     * @description validates that a post's title and body are not empty\n     */\n    function validate(title, body){\n        return title !== \"\" && body !== \"\"\n    }\n    /**\n     * @function isValid\n     * @returns {boolean}\n     * @description high performance version of validate.\n     */\n    let isValid = _.memoize(validate);\n    \n    /**\n     * @function updatePost\n     * @param {SyntheticEvent} $event \n     * @param {string} field \n     * @description updatePost takes the input value from an onChange event and triggers a state update on the field that is updating. This can be either the title or the body\n     */\n    function updatePost($event, field){\n        setPost(prevPost => ({\n            ...prevPost,\n            [field]: $event.target.value\n        }));\n    }\n    /**\n     * @function addPost\n     * @param {SyntheticEvent} $event\n     * @description Triggers an endpoint to create a new post for the given user.\n     */\n    function addPost($event){\n        $event.preventDefault();\n        if(isValid(post.title, post.body)){\n            axios.post(`https://jsonplaceholder.typicode.com/posts`, {post, userId: 1}).then(response=>{\n                setStatus(response.status);    \n            }).finally(()=>{\n                setPost({\n                    title: '',\n                    body: ''\n                })\n\n                setTimeout(()=> setStatus(null), 2500)\n\n            })\n        }\n    }\n    \n    return (\n        <>\n        <Alert show={status !== null} variant={status < 300 ? 'success' : 'danger'} onClose={() => setStatus(null)}dismissible>\n            {status < 300 && status? 'Post created!' : 'Hmm, that message didn\\'t post.'}\n        </Alert>\n        <Container size=\"sm\">\n        <Row>\n            <Col><h1>Question 2</h1></Col>\n        </Row>\n        <Row>\n            <Col>\n                <p>One of the requirements of our application is that users should be able to create posts. A post is made up of a title and a body. Please use the <a href=\"https://jsonplaceholder.typicode.com/posts\" target=\"_blank\" rel=\"noreferrer\">provided API</a> to post a message. </p>\n                <ol className=\"w-50\" style={{margin: \"auto\"}}>\n                    <li>If given an error status, what message would you show the user and how?</li>\n                    <li>How can we prevent invalid requests from being fired?</li>\n                </ol>\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <Form>\n                    <Form.Label className=\"mt-3 mb-3\">\n                        Title\n                    </Form.Label>\n                    <Form.Control type=\"text\" value={post.title} onChange={($event)=> updatePost($event, 'title')} />\n                    <Form.Label className=\"mb-3\">\n                        Body\n                    </Form.Label>\n                    <Form.Control as=\"textarea\" value={post.body} onChange={($event) => updatePost($event, 'body')} />\n                    <Button className=\"mt-3\" variant=\"primary\" type=\"submit\" onClick={addPost}>\n                        Post\n                    </Button>\n                </Form>\n            </Col>\n        </Row>\n        </Container>\n        </>\n    );\n};","export default function Question3(){\n    return (\n        <div>Question 3</div>\n    );\n};","import './App.css';\nimport {Nav, Navbar} from \"react-bootstrap\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Questions from './questions/index';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n      <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Nav className=\"me-auto\">\n          <Nav.Link as={Link} to=\"/interview/question-1\">Interview Question 1</Nav.Link>\n          <Nav.Link as={Link} to=\"/interview/question-2\">Interview Question 2</Nav.Link>\n          {/* <Nav.Link as={Link} to=\"/question-3\">Interview Question 3</Nav.Link> */}\n        </Nav>\n      </Navbar>\n\n      <Switch>\n          <Route path=\"/interview/question-1\">\n           <Questions.Q1 />\n          </Route>\n          <Route path=\"/interview/question-2\">\n            <Questions.Q2 />\n          </Route>\n          <Route path=\"/interview/question-3\">\n            <Questions.Q3 />\n          </Route>\n        </Switch>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}